import { Slider, GroupBox, HorizontalBox, VerticalBox, LineEdit, Button } from "std-widgets.slint";

export component MainWindow inherits Window {
    in-out property <float> pitch: 0.15;
    in-out property <float> yaw: 0.5;
    out property <int> chart_width;
    out property <int> chart_height;
    property <length> mainHeight;
    out property <float> crecimiento;
    out property <float> inicial;
    out property <int> tiempo;

    pure callback render_plot(int, int, float, float, int) -> image;

    title: "Gráfica Poblacional";
    preferred-width: 800px;
    preferred-height: 600px;

    container := HorizontalBox {
        VerticalBox {
            width: 400px;

            crecimiento_input := LineEdit {
                placeholder-text: "Ingresa la tasa de crecimiento poblacional";
                input-type: decimal;
            }

            inicial_input := LineEdit {
                placeholder-text: "Ingresa el valor inicial de la población";
                input-type: decimal;
            }

            tiempo_input := LineEdit {
                placeholder-text: "Ingresa el tiempo";
                input-type: number;
            }

            Button {
                text: "Renderizar";
                clicked => {
                    root.crecimiento = crecimiento_input.text.to-float();
                    root.inicial = inicial_input.text.to-float();
                    root.tiempo = tiempo_input.text.to-float();
                    chart-image.source = root.render_plot(chart-image.width / 1px, chart-image.height / 1px, root.crecimiento, root.inicial, root.tiempo);
                }
            }
        }

        VerticalBox {
            chart_image := Image {
                source: root.render_plot(800, 1000, 1, 1, 1);
                touch := TouchArea {
                    property <float> pressed-pitch;
                    property <float> pressed-yaw;

                    pointer-event(event) => {
                        if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                            self.pressed-pitch = root.pitch;
                            self.pressed-yaw = root.yaw;
                        }
                    }
                    moved => {
                        if (self.enabled && self.pressed) {
                            root.pitch = self.pressed-pitch + (touch.mouse-y - touch.pressed-y) / self.height * 3.14;
                            root.yaw = self.pressed-yaw - (touch.mouse-x - touch.pressed-x) / self.width * 3.14;
                        }
                    }
                    mouse-cursor: self.pressed ? MouseCursor.grabbing : MouseCursor.grab;
                }
            }
        }
    }
}
